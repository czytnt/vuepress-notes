(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{294:function(a,t,e){"use strict";e.r(t);var n=e(13),s=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[a._v("#")]),a._v(" Vue")]),a._v(" "),t("p",[a._v("Author-Allen")]),a._v(" "),t("p",[a._v("Time-2022/11/16")]),a._v(" "),t("h2",{attrs:{id:"_1-模板语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-模板语法"}},[a._v("#")]),a._v(" 1. 模板语法")]),a._v(" "),t("h3",{attrs:{id:"_1-1-插值语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-插值语法"}},[a._v("#")]),a._v(" 1.1 插值语法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    <h1>插值语法</h1>\n    <h3>{{name}}</h3>   多用于标签体内的值\n    // {{xxx}}   xxx 是 js 表达式，且可以直接读取到data中的所有属性\n")])])]),t("h3",{attrs:{id:"_1-2-指令语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-指令语法"}},[a._v("#")]),a._v(" 1.2 指令语法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('    <a v-bind:href="url">链接</a>\n    <a v-bind:href="url" :x="hello">链接</a>\n    \x3c!-- v-bind 动态的绑定一个值，可以简写成 ： --\x3e\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    //指令语法的多级结构\n        //若有重名的data属性值，则可以写为\n        new Vue({ \n            el:'#xxid',\n            data:{\n                name:'hello',\n                url:'http://cn.bing.com'\n                school:{\n                    name:'你好',\n                    url:'http://baidu.com'\n                }\n            }\n        })\n        <a v-bind:href=\"url\" :x=\"hello\">{{ school.name }}</a>\n")])])]),t("h2",{attrs:{id:"_2-数据绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据绑定"}},[a._v("#")]),a._v(" 2. 数据绑定")]),a._v(" "),t("h3",{attrs:{id:"_2-1-单向与双向数据绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-单向与双向数据绑定"}},[a._v("#")]),a._v(" 2.1 单向与双向数据绑定")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('    <div id="root">\n            \x3c!-- 单向 v-bind ，即只能从控制台改变数据影响页面上数据，data 流向页面，不能反向影响 --\x3e\n            \x3c!-- 双向 v-model ，即控制台和页面可双向影响 --\x3e\n            单向数据绑定：<input type="text" v-bind:value="xname"> <br>\n            双向数据绑定：<input type="text" v-model:value="xname"> <br>\n\n            \x3c!-- 简写\n            \n                单向数据绑定：<input type="text" :value="xname"> <br>\n                双向数据绑定：<input type="text" v-model="xname"> <br>\n            \n             --\x3e\n\n            \x3c!-- 如下代码错误，因为 v-model 只能应用在表单类元素（输入类元素） --\x3e\n            <h3 v-model:v-text:="xname">hello</h3>   //v-model:value 可简写为v-model:\n        </div> \n        <script type="text/javascript">\n            new Vue({\n                el:"#root",\n                data:{\n                    xname:\'你好\'\n                }\n            })\n        <\/script>\n')])])]),t("h2",{attrs:{id:"_3-el与data的两种写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-el与data的两种写法"}},[a._v("#")]),a._v(" 3. el与data的两种写法")]),a._v(" "),t("h3",{attrs:{id:"_3-1-el的常规写法-new的时候就知道给哪个容器服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-el的常规写法-new的时候就知道给哪个容器服务"}},[a._v("#")]),a._v(" 3.1 el的常规写法（new的时候就知道给哪个容器服务）")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('   <script type="text/javascript">\n            new Vue({\n                el:"#root",\n                data:{\n                    xname:\'你好\'\n                }\n            })\n        <\/script> \n')])])]),t("h3",{attrs:{id:"_3-2-回头再指定el服务对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-回头再指定el服务对象"}},[a._v("#")]),a._v(" 3.2 回头再指定el服务对象")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    <script type=\"text/javascript\">\n            const v=new Vue({\n                data:{\n                    xname:'你好'\n                }\n            })\n\n            // console.log(v);\n\n            setTimeout(()=>{\n                v.$mount('#root')   //用这个方法，等1s钟之后才显示data数据 ==>一开始只显示{{name}}\n            },1000); \n\n        <\/script>\n")])])]),t("h3",{attrs:{id:"_3-3-data对象式写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-data对象式写法"}},[a._v("#")]),a._v(" 3.3 data对象式写法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    data:{\n                    xname:'你好'\n                }\n")])])]),t("h3",{attrs:{id:"_3-4-data的函数式写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-data的函数式写法"}},[a._v("#")]),a._v(" 3.4 data的函数式写法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    data:function(){\n        return {\n            name:'Hello'\n        }\n    }\n")])])]),t("h2",{attrs:{id:"_4-mvvm模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-mvvm模型"}},[a._v("#")]),a._v(" 4.MVVM模型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\x3c!-- \n    MVVM模型：\n        1.M：模型（Moudle）：在data中的数据\n        2.V：视图（View）：模板代码\n        3.VM：视图模型（ViewMoudle）：Vue实例\n    1.data中所有的属性，最后都出现在vm（Vue实例）上\n    2.vm上所有的属性以及Vue原型上的所有属性，在Vue模板中都可以直接使用\n--\x3e\n\n<div id=\"root\">\n        \x3c!-- 准备好一个容器 --\x3e\n        <h1>学校名称：{{name}}</h1>   ---\x3e对应 View\n        <h1>学校地址：{{address}}</h1>\n    </div>\n    <script type=\"text/javascript\">\n        Vue.config.productionTip = false //阻止Vue在启动时生成生产提示\n        new Vue({                   ---\x3e对应 ViewMoudle\n            el: '#root',\n            data: {                 ---\x3e对应Model\n                name: 'tnt',\n                address: '重庆'\n            }\n        })\n    <\/script>\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);